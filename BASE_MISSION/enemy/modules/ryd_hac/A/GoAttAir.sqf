_i = "";_unitG = _this select 0;_Trg = _this select 1;_isAttacked = _Trg getvariable ("AirAttacked" + str _Trg);if (isNil ("_isAttacked")) then {_isAttacked = 0};if (random 100 < (RydHQ_ScanCity + RydHQ_ScanTrees + RydHQ_ScanForest + (RydHQ_ScanHills/2))* (20/(0.5 + (2*RydHQ_Recklessness)))) exitwith {if (_isAttacked == 0) then {_Trg setvariable [("AirAttacked" + str _Trg),0.1,true]}};_ammo = 0;	{	_ammo = _ammo + (count (magazines (vehicle _x)))	}foreach (units _unitG);if (_ammo == 0) exitwith {if (_isAttacked == 0) then {_Trg setvariable [("AirAttacked" + str _Trg),0.1,true]}};if not (alive _Trg) then {_Trg = ObjNull};if (IsNull _Trg) exitwith {if (_isAttacked == 0) then {_Trg setvariable [("AirAttacked" + str _Trg),0.1,true]}};_PosObj1 = position _Trg;_unitvar = str (_unitG);_busy = false;_busy = _unitG getvariable ("Busy" + _unitvar);_UL = leader _unitG;_PosLand = position _UL;if (isNil ("_busy")) then {_busy = false};if ((_busy) or (_unitG in RydHQ_FlankAv)) exitwith {if (_isAttacked == 0) then {_Trg setvariable [("AirAttacked" + str _Trg),0.1,true]}};if (_isAttacked > 0.1) exitwith {};while {((count (waypoints _unitG)) > 0)} do	{	 deleteWaypoint ((waypoints _unitG) select 0);	};if (_isAttacked < 1) then {_Trg setvariable [("AirAttacked" + str _Trg),1,true]};_isAttacked = _Trg getvariable ("AirAttacked" + str _Trg);_unitG setVariable [("Busy" + _unitvar), true, true];RydHQ_AttackAv = RydHQ_AttackAv - [_unitG];_nothing = true;_dX = (_PosObj1 select 0) - ((getPos leaderHQ) select 0);_dY = (_PosObj1 select 1) - ((getPos leaderHQ) select 1);_angle = _dX atan2 _dY;_distance = leaderHQ distance _PosObj1;_distance2 = 0;_dXc = _distance2 * (cos _angle);_dYc = _distance2 * (sin _angle);_dXb = _distance * (sin _angle);_dYb = _distance * (cos _angle);_posX = ((getPos leaderHQ) select 0) + _dXb;_posY = ((getPos leaderHQ) select 1) + _dYb;if (RydHQ_Debug) then	{	_i = "markAttack" + str (_unitG);	_markerposition = [_posX,_posY];	_markercolor = "ColorRed";	_markershape = "ICON";	_markertype = "DOT";	_markertext = "Air A"; _marker = [_i, _markerposition, _markershape, [1,1], "COLOR:", _markercolor,"TEXT:",_markertext,"TYPE:",_markertype, "GLOBAL"] call CBA_fnc_createMarker;	};_wp = _unitG addWaypoint [[_posX,_posY], 0, 1];_wp setWaypointType "SAD";_wp setWaypointBehaviour "COMBAT";_wp setWaypointCombatMode "RED";_wp setWaypointSpeed "NORMAL";_wp setWaypointStatements ["true","deleteWaypoint [group this, 0];"];_unitG setCurrentWaypoint _wp;_alive = false;_timer = -5;waituntil 	{	sleep 6;	if not (isNull _unitG) then {_alive = true};	if ((speed (vehicle (leader _unitG))) == 0) then {_timer = _timer + 5};	((count (waypoints _unitG)) < 1) or (_timer > 120);	};if not (_alive) exitwith {	if (RydHQ_Debug) then {		[-1,{deleteMarker _this}, ("markAttack" + str (_unitG))] call CBA_fnc_globalExecute;	};};_wp = _unitG addWaypoint [_Posland, 0, 1];_wp setWaypointType "MOVE";_wp setWaypointBehaviour "AWARE";_wp setWaypointCombatMode "GREEN";_wp setWaypointSpeed "NORMAL";_wp setWaypointStatements ["true", "(vehicle this) land 'LAND';deleteWaypoint [group this, 0];"];_unitG setCurrentWaypoint _wp;_alive = false;_timer = -5;waituntil 	{	sleep 6;	if not (isNull _unitG) then {_alive = true};	if ((speed (vehicle (leader _unitG))) == 0) then {_timer = _timer + 5};	((count (waypoints _unitG)) < 1) or (_timer > 120);	};if not (_alive) exitwith {if (RydHQ_Debug) then {[-1,{deleteMarker _this},  ("markAttack" + str (_unitG))] call CBA_fnc_globalExecute;};};if (RydHQ_Debug) then {[-1,{_i setmarkercolor _this},  "ColorBlue"] call CBA_fnc_globalExecute};sleep 30;if (RydHQ_Debug) then {[-1,{deleteMarker _this},  ("markAttack" + str (_unitG))] call CBA_fnc_globalExecute};_all = true;	{	if ((_x in RydHQ_AttackAv) and not (_x getVariable ("Busy" + str (_x)))) exitwith {_all = false};	}foreach RydHQ_AirG;_countAv = count RydHQ_AttackAv;RydHQ_AttackAv = RydHQ_AttackAv + [(_unitG)];_unitG setVariable [("Busy" + str (_unitG)), false, true];if (((_Trg getvariable ("AirAttacked" + str _Trg)) > 0) or (_all)) exitwith {_Trg setvariable [("AirAttacked" + str _Trg),0,true]};